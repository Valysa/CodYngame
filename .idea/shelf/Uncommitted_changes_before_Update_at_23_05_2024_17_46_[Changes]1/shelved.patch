Index: src/main/java/M/Bdd.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package M;\nimport launcher.Main;\n\nimport java.sql.*;\n\n\n\n\npublic class Bdd {\n\n    static String port ;\n    static String user;\n    static String password;\n\n    // Connect to the database\n\n    public static Connection start (){\n\n        Connection con = null;\n\n        try{\n            con =  DriverManager.getConnection(\"jdbc:mysql://localhost:\" + port + \"/\",user,password);\n            Statement stmt = con.createStatement();\n\n            String sql = \"CREATE DATABASE IF NOT EXISTS Exercise\";\n            stmt.executeUpdate(sql);\n\n            stmt.close();\n            end(con);\n\n            con =  DriverManager.getConnection(\"jdbc:mysql://localhost:\" + port + \"/Exercise\",user,password);\n\n        } catch (SQLException e) {\n            System.out.println(\"Error during the connexion to the database : \" + e.getMessage());\n        }\n\n        return con ;\n    }\n\n\n\n    // Disconnect to the database\n\n    public static void end(Connection con){\n\n        try {\n            con.close();\n\n        } catch (SQLException e) {\n            System.out.println(\"Error during the disconnexion to the database : \" + e.getMessage());\n        }\n\n    }\n\n    public static void idBdd(String p,String u,String pa){\n        port = p;\n        user = u;\n        password = pa;\n    }\n\n\n\n    // Create the table in the database\n\n    public static void create() {\n\n\n        try {\n\n            Connection con = start();\n            Statement stmt = con.createStatement();\n\n\n            String sql =\n                      \"CREATE TABLE IF NOT EXISTS Question (\\n\"\n                    + \"Id INT AUTO_INCREMENT PRIMARY KEY,\\n\"\n                    + \"ExoType TINYINT,\\n\"\n                    + \"ExoName VARCHAR(255),\\n\"\n                    + \"Instruction TEXT,\\n\"\n                    + \"SolutionLang TINYINT,\\n\"\n                    + \"SolutionCode TEXT,\\n\"\n                    + \"GeneratorCode TEXT,\\n\"\n                    + \"MainCode TEXT,\\n\"\n                    + \"NbTry INT,\\n\"\n                    + \"NbSucess INT,\\n\"\n                    + \"NbSessionSucess INT,\\n\"\n                    + \"NbFirstTry INT\\n\"\n                    + \")AUTO_INCREMENT = 1;\\n\";\n\n            stmt.executeUpdate(sql);\n\n            stmt.close();\n            end(con);\n\n        } catch (SQLException e) {\n            System.out.println(\"Error during the creation of the table : \" + e.getMessage());\n        }\n\n        basicExo();\n\n    }\n\n    public static void basicExo(){\n\n        addEx(0,\"Exercise 1\",\"You will be given in entry a list of 10 integer and we ask you to give back their values multiplied by two\",0,\"int main(){\\n\\tint entry;\\n\\tint exit;\\n\\tfor(int i=0; i<10; i++){\\n\\t\\tscanf(\\\"%d\\\",&entry);\\n\\t\\texit = entry*2;\\n\\t\\tprintf(\\\"%d\\\\n\\\",exit);\\n\\t}\\n\\treturn 0;\\n}\",\"\",\"\");\n        addEx(0,\"Exercise 2\",\"You will be given in entry a list of 10 integer and we ask you to give back their values multiplied by ten\",0,\"int main(){\\n\\tint entry;\\n\\tint exit;\\n\\tfor(int i=0; i<10; i++){\\n\\t\\tscanf(\\\"%d\\\",&entry);\\n\\t\\texit = entry*10;\\n\\t\\tprintf(\\\"%d\\\\n\\\",exit);\\n\\t}\\n\\treturn 0;\\n}\",\"\",\"\");\n        addEx(1,\"Exercise 3\",\"You will be create a function that calculates the sum of an array\",0,\"int array_sum1(int array[], int size){\\n\\tint sum = 0;\\n\\tfor(int i = 0; i < size; i++){\\n\\t\\tsum += array[i];\\n\\t}\\n\\treturn sum;\\n}\",\"int array_sum(int array[], int size){\\n\\n}\",\"#include <stdio.h>\\n#include <stdlib.h>\\n#include <time.h>\\n#include \\\"soluceExo.c\\\"\\n#include \\\"userExo.c\\\"\\n\\nint run_test(int array[], int size){\\n\\tint result1 = array_sum1(array, size);\\n\\tint result2 = array_sum(array, size);\\n\\tputs(\\\"\\\");\\n\\tif(result1 == result2){\\n\\t\\tprintf(\\\"Test passed\\\");\\n\\t\\treturn 0;\\n\\t}\\n\\telse{\\n\\t\\tprintf(\\\"Test failed\\\");\\n\\t\\treturn 1;\\n\\t}\\n}\\n\\nint main(){\\n\\tint failed = 0;\\n\\tint array1[] = {1,2,3,4,5};\\n\\tfailed |= run_test(array1,5);\\n\\tint array2[] = {-1,-2,-3,-4,-5,-6};\\n\\tfailed |= run_test(array2,5);\\n\\tint array3[] = {0,0,0};\\n\\tfailed |= run_test(array3,3);\\n\\treturn failed;\\n}\");\n        addEx(1,\"Exercise 4\",\"You will be create a function that calculates the sum of an array\",1,\"def array_sum1(array, size):\\n\\tsum = 0\\n\\tfor i in range(size):\\n\\t\\tsum += array[i]\\n\\treturn sum\",\"def array_sum(array, size):\\n\\t\",\"import random\\nimport soluceExo\\nimport userExo\\n\\ndef run_test(array, size):\\n\\tresult1 = soluceExo.array_sum1(array, size)\\n\\tresult2 = userExo.array_sum(array, size)\\n\\tif(result1 == result2):\\n\\t\\tprint(\\\"Test passed\\\")\\n\\t\\treturn 0\\n\\telse:\\n\\t\\tprint(\\\"Test failed\\\")\\n\\t\\treturn 1\\n\\ndef main():\\n\\tfailed = 0\\n\\tminSize = 5\\n\\tmaxSize = 100\\n\\tminValue = -1000\\n\\tmaxValue = 1000\\n\\tarraySize1 = random.randint(minSize, maxSize)\\n\\tarray1 = [random.randint(minValue, maxValue) for _ in range(arraySize1)]\\n\\tfailed |= run_test(array1,arraySize1)\\n\\tarraySize2 = random.randint(minSize, maxSize)\\n\\tarray2 = [random.randint(minValue, maxValue) for _ in range(arraySize2)]\\n\\tfailed |= run_test(array2,arraySize2)\\n\\tarraySize3 = random.randint(minSize, maxSize)\\n\\tarray3 = [0 for _ in range(arraySize3)]\\n\\tfailed |= run_test(array3,arraySize3)\\n\\tarray4 = []\\n\\tfailed |= run_test(array4,0)\\n\\treturn failed\\n\\nmain()\");\n        addEx(1,\"Exercise 5\",\"You will be create a function that calculates the sum of an array\",3, \"<?php\\n\\tfunction arraySum1($array, $size){\\n\\t\\t$sum = 0;\\n\\t\\tfor($i = 0; $i < $size; $i++){\\n\\t\\t\\t$sum += $array[$i];\\n\\t\\t}\\n\\t\\treturn $sum;\\n\\t}\\n?>\", \"<?php\\n\\tfunction arraySum($array, $size){\\n\\n\\t}\\n?>\", \"<?php\\n\\tinclude 'soluceExo.php';\\n\\tinclude 'userExo.php';\\n\\n\\tfunction generateRandomArray($minSize, $maxSize, $minValue, $maxValue){\\n\\t\\t$size = rand($minSize, $maxSize);\\n\\t\\tfor($i = 0; $i < $size; $i++){\\n\\t\\t\\t$array[$i] = rand($minValue, $maxValue);\\n\\t\\t}\\n\\t\\treturn $array;\\n\\t}\\n\\n\\tfunction run_test($array, $size){\\n\\t\\t$result1 = arraySum1($array, $size);\\n\\t\\t$result2 = arraySum($array, $size);\\n\\t\\tif($result1 == $result2){\\n\\t\\t\\techo \\\"Test passed\\\";\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\telse{\\n\\t\\t\\techo \\\"Test failed\\\";\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction main(){\\n\\t\\t$failed = 0;\\n\\t\\t$minSize = 5;\\n\\t\\t$maxSize = 100;\\n\\t\\t$minValue = -1000;\\n\\t\\t$maxValue = 1000;\\n\\t\\t$array1 = generateRandomArray($minSize, $maxSize, $minValue, $maxValue);\\n\\t\\t$failed |= run_test($array1,count($array1));\\n\\t\\t$array2 = generateRandomArray($minSize, $maxSize, $minValue, $maxValue);\\n\\t\\t$failed |= run_test($array2,count($array2));\\n\\t\\t$array3 = generateRandomArray($minSize, $maxSize, 0, 0);\\n\\t\\t$failed |= run_test($array3,count($array3));\\n\\t\\t$array4 = [];\\n\\t\\t$failed |= run_test($array4,count($array4));\\n\\t\\treturn $failed;\\n\\t}\\n\\n\\tmain();\\n?>\");\n        addEx(1,\"Exercise 6\",\"You will be create a function that calculates the average of an array\", 5, \"export function array_moy1(array, size){\\n\\tif(size === 0){\\n\\t\\treturn null;\\n\\t}\\n\\tlet sum = 0;\\n\\tfor(let i = 0; i < size; i++){\\n\\t\\tsum = sum + array[i];\\n\\t}\\n\\treturn sum/size;\\n}\",\"function array_moy(array, size){\\n\\n}\",\"import { array_moy } from \\\"./userExo.mjs\\\";\\nimport { array_moy1 } from \\\"./soluceExo.mjs\\\";\\n\\nfunction generateRandomArray(minSize, maxSize, minValue, maxValue){\\n\\tconst size = Math.floor(Math.random() * (maxSize - minSize + 1)) + minSize;\\n\\tconst array = [];\\n\\tfor(let i = 0; i < size; i++){\\n\\t\\tconst value = Math.floor(Math.random() * (maxValue - minValue + 1)) + minValue;\\n\\t\\tarray.push(value);\\n\\t}\\n\\treturn array;\\n}\\n\\nfunction run_test(array, size){\\n\\tlet result1 = array_moy1(array, size);\\n\\tlet result2 = array_moy(array, size);\\n\\tif(result1 === result2){\\n\\t\\tconsole.log(\\\"Test passed\\\");\\n\\t\\treturn 0;\\n\\t}\\n\\telse{\\n\\t\\tconsole.log(\\\"Test failed\\\");\\n\\t\\treturn 1;\\n\\t}\\n}\\n\\nfunction main(){\\n\\tlet failed = 0;\\n\\tconst minSize = 5;\\n\\tconst maxSize = 100;\\n\\tconst minValue = -1000;\\n\\tconst maxValue = 1000;\\n\\tconst array1 = generateRandomArray(minSize,maxSize,minValue,maxValue);\\n\\tfailed |= run_test(array1,array1.length);\\n\\tconst array2 = generateRandomArray(minSize,maxSize,minValue,maxValue);\\n\\tfailed |= run_test(array2,array2.length);\\n\\tconst array3 = generateRandomArray(minSize,maxSize,0,0);\\n\\tfailed |= run_test(array3,array3.length);\\n\\tconst array4 = [];\\n\\tfailed |= run_test(array4,array4.length);\\n\\treturn failed;\\n}\\n\\nmain();\");\n        addEx(1,\"Exercise 7\",\"You will be create a function that calculates the average of an array\",2, \"package Exo7;\\n\\npublic class soluceExo {\\n\\tprivate final int[] array;\\n\\n\\tpublic soluceExo(int[] Array) {\\n\\t\\tthis.array = Array ;\\n\\t}\\n\\n\\tpublic float array_moy(){\\n\\t\\tif(this.array.length == 0){\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\tfloat sum = 0;\\n\\t\\tfor (int i : this.array) {\\n\\t\\t\\tsum += i;\\n\\t\\t}\\n\\t\\treturn sum/this.array.length;\\n\\t}\\n}\",\"package Exo7;\\n\\npublic class userExo {\\n\",\"package Exo7;\\n\\nimport java.util.Random;\\n\\npublic class mainExo {\\n\\n\\tpublic static void main(String[] args){\\n\\t\\tint failed  = 0;\\n\\t\\tint minSize = 5;\\n\\t\\tint maxSize = 100;\\n\\t\\tint minValue = -1000;\\n\\t\\tint maxValue = 1000;\\n\\t\\tint[] randomArray1 = generateRandomArray(minSize, maxSize, minValue, maxValue);\\n\\t\\tsoluceExo arrays1 = new soluceExo(randomArray1);\\n\\t\\tuserExo array1 = new userExo(randomArray1);\\n\\t\\tfailed |= run_test(arrays1, array1);\\n\\t\\tint[] randomArray2 = generateRandomArray(minSize, maxSize, minValue, maxValue);\\n\\t\\tsoluceExo arrays2 = new soluceExo(randomArray2);\\n\\t\\tuserExo array2 = new userExo(randomArray2);\\n\\t\\tfailed |= run_test(arrays2, array2);\\n\\t\\tint[] randomArray3 = generateRandomArray(minSize, maxSize, 0, 0);\\n\\t\\tsoluceExo arrays3 = new soluceExo(randomArray3);\\n\\t\\tuserExo array3 = new userExo(randomArray3);\\n\\t\\tfailed |= run_test(arrays3, array3);\\n\\t\\tint[] randomArray4 = new int[0];\\n\\t\\tsoluceExo arrays4 = new soluceExo(randomArray4);\\n\\t\\tuserExo array4 = new userExo(randomArray4);\\n\\t\\tfailed |= run_test(arrays4, array4);\\n\\t\\tSystem.exit(failed);\\n\\t}\\n\\n\\tpublic static int[] generateRandomArray(int minSize, int maxSize, int minValue, int maxValue){\\n\\t\\tRandom random = new Random();\\n\\t\\tint size = random.nextInt((maxSize - minSize) + 1) + minSize;\\n\\t\\tint[] array = new int[size];\\n\\t\\tfor(int i = 0; i < size; i++){\\n\\t\\t\\tarray[i] = random.nextInt((maxValue - minValue) + 1) + minValue;\\n\\t\\t}\\n\\t\\treturn array;\\n\\t}\\n\\n\\tpublic static int run_test(soluceExo array1, userExo array2){\\n\\t\\tfloat result1 = array1.array_moy();\\n\\t\\tfloat result2 = array2.array_moy();\\n\\t\\tif(result1 == result2){\\n\\t\\t\\tSystem.out.println(\\\"Test passed\\\");\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\telse{\\n\\t\\t\\tSystem.out.println(\\\"Test failed\\\");\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t}\\n}\");\n    }\n\n    // Take a Question (Id) from the database and stock it in the class Excercise\n    \n    public static Exercise take(int Id){\n\n        Exercise exo = null;\n        String sql = \"SELECT * FROM Question WHERE Id = ?\";\n\n        Connection con = start();\n\n        try {\n\n            PreparedStatement pstmt = con.prepareStatement(sql);\n\n            pstmt.setInt(1, Id);\n            ResultSet rs = pstmt.executeQuery();\n\n            if (rs.next()) {\n\n                if (rs.getInt(\"ExoType\") == 0) {\n                    exo = new ExerciseStdinStdout(\n                            rs.getInt(\"Id\"),\n                            rs.getInt(\"ExoType\"),\n                            rs.getString(\"ExoName\"),\n                            rs.getString(\"Instruction\"),\n                            rs.getInt(\"SolutionLang\"),\n                            rs.getString(\"SolutionCode\"),\n                            rs.getString(\"GeneratorCode\"),\n                            rs.getInt(\"NbTry\"),\n                            rs.getInt(\"NbSucess\"),\n                            rs.getInt(\"NbSessionSucess\"),\n                            rs.getInt(\"NbFirstTry\")\n                    );\n                }\n                else {\n                    exo = new ExerciseInclude(\n                            rs.getInt(\"Id\"),\n                            rs.getInt(\"ExoType\"),\n                            rs.getString(\"ExoName\"),\n                            rs.getString(\"Instruction\"),\n                            rs.getInt(\"SolutionLang\"),\n                            rs.getString(\"SolutionCode\"),\n                            rs.getString(\"GeneratorCode\"),\n                            rs.getString(\"MainCode\"),\n                            rs.getInt(\"NbTry\"),\n                            rs.getInt(\"NbSucess\"),\n                            rs.getInt(\"NbSessionSucess\"),\n                            rs.getInt(\"NbFirstTry\")\n                    );\n                }\n            } else {\n                System.out.println(\"No question find with this ID : \" + Id);\n            }\n\n            end(con);\n            pstmt.close();\n            rs.close();\n\n        } catch (SQLException e) {\n            System.out.println(\"Error during the recuperation of the table : \" + e.getMessage());\n        }\n\n        return exo;\n    }\n\n\n\n    // Add an exercise to the database (question)\n\n    public static void addEx(int ExoType, String ExoName, String Instruction, int SolutionLang, String SolutionCode, String GeneratorCode, String MainCode) {\n\n        int NbTry = 0;\n        int NbSucess = 0;\n        int NbSessionSucess = 0;\n        int NbFirstTry = 0;\n\n        String checkSql = \"SELECT COUNT(*) FROM Question WHERE ExoName = ?\";\n        String insertSql = \"INSERT INTO Question (ExoType, ExoName, Instruction, SolutionLang, SolutionCode, GeneratorCode, MainCode, NbTry, NbSucess, NbSessionSucess, NbFirstTry) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\n\n\n        try {\n            Connection con = start();\n\n            PreparedStatement checkStmt = con.prepareStatement(checkSql);\n            checkStmt.setString(1, ExoName);\n            ResultSet rs = checkStmt.executeQuery();\n\n            if (rs.next() && rs.getInt(1) == 0) {\n                PreparedStatement insertStmt = con.prepareStatement(insertSql);\n\n                insertStmt.setInt(1, ExoType);\n                insertStmt.setString(2, ExoName);\n                insertStmt.setString(3, Instruction);\n                insertStmt.setInt(4, SolutionLang);\n                insertStmt.setString(5, SolutionCode);\n                insertStmt.setString(6, GeneratorCode);\n                insertStmt.setString(7, MainCode);\n                insertStmt.setInt(8, NbTry);\n                insertStmt.setInt(9, NbSucess);\n                insertStmt.setInt(10, NbSessionSucess);\n                insertStmt.setInt(11, NbFirstTry);\n                insertStmt.executeUpdate();\n\n                rs.close();\n                checkStmt.close();\n                insertStmt.close();\n                end(con);\n            }\n        } catch (SQLException e) {\n            System.out.println(\"Error during the addition of a new question: \" + e.getMessage());\n        }\n    }\n\n\n\n\n\n\n    // Increment all the number of try/sucess of the wanted number in the database\n\n    public static void update(int Id,int NbTry,int NbSucess,int NbSessionSucess,int NbFirstTry) {\n\n        String sql =\n                \"UPDATE Question SET \" +\n                \"NbTry = NbTry + ?, \" +\n                \"NbSucess = NbSucess + ?, \" +\n                \"NbSessionSucess = NbSessionSucess + ?, \" +\n                \"NbFirstTry = NbFirstTry + ? \" +\n                \" WHERE Id = ?\";\n\n        Connection con = start();\n\n        try{\n            PreparedStatement pstmt = con.prepareStatement(sql);\n\n            pstmt.setInt(1, NbTry);\n            pstmt.setInt(2, NbSucess);\n            pstmt.setInt(3, NbSessionSucess);\n            pstmt.setInt(4, NbFirstTry);\n            pstmt.setInt(5, Id);\n\n            pstmt.executeUpdate();\n\n            end(con);\n            pstmt.close();\n\n        } catch (SQLException e) {\n            System.out.println(\"Error during the update of the numbers : \" + e.getMessage());\n        }\n    }\n\n\n\n    // Count the number of question in the database\n\n    public static int count(){\n\n        int count = 0;\n\n        String sql = \"SELECT COUNT(*) AS count FROM Question\";\n\n        Connection con = start();\n\n        try{\n            PreparedStatement pstmt = con.prepareStatement(sql);\n            ResultSet rs = pstmt.executeQuery();\n\n            if (rs.next()) {\n                count = rs.getInt(\"count\");\n            }\n\n            end(con);\n            pstmt.close();\n            rs.close();\n\n        } catch (SQLException e) {\n            System.out.println(\"Error during the count : \" + e.getMessage());\n        }\n\n        return count;\n    }\n\n\n\n    // Delete the wanted question and remake the id to be correct\n\n    public static void delete(int Id){\n\n        String sqlDelete = \"DELETE FROM Question WHERE Id = ?\";\n        String sqlUpdateIds = \"UPDATE Question SET Id = Id - 1 WHERE Id > ?\";\n\n        Connection con = start();\n\n        try{\n            con.setAutoCommit(false);\n\n            PreparedStatement pstmtDelete = con.prepareStatement(sqlDelete);\n            pstmtDelete.setInt(1, Id);\n            pstmtDelete.executeUpdate();\n\n            PreparedStatement pstmtUpdateIds = con.prepareStatement(sqlUpdateIds);\n            pstmtUpdateIds.setInt(1, Id);\n            pstmtUpdateIds.executeUpdate();\n\n            con.commit();\n\n            end(con);\n            pstmtDelete.close();\n            pstmtUpdateIds.close();\n\n        } catch (SQLException e) {\n            System.out.println(\"Error during the delete of the question : \" + e.getMessage());\n\n            try {\n                con.rollback();\n            } catch (SQLException ex) {\n                System.out.println(\"Error during rollback : \" + ex.getMessage());\n            }\n        }\n    }\n\n\n\n}\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/M/Bdd.java b/src/main/java/M/Bdd.java
--- a/src/main/java/M/Bdd.java	
+++ b/src/main/java/M/Bdd.java	
@@ -104,7 +104,7 @@
 
         addEx(0,"Exercise 1","You will be given in entry a list of 10 integer and we ask you to give back their values multiplied by two",0,"int main(){\n\tint entry;\n\tint exit;\n\tfor(int i=0; i<10; i++){\n\t\tscanf(\"%d\",&entry);\n\t\texit = entry*2;\n\t\tprintf(\"%d\\n\",exit);\n\t}\n\treturn 0;\n}","","");
         addEx(0,"Exercise 2","You will be given in entry a list of 10 integer and we ask you to give back their values multiplied by ten",0,"int main(){\n\tint entry;\n\tint exit;\n\tfor(int i=0; i<10; i++){\n\t\tscanf(\"%d\",&entry);\n\t\texit = entry*10;\n\t\tprintf(\"%d\\n\",exit);\n\t}\n\treturn 0;\n}","","");
-        addEx(1,"Exercise 3","You will be create a function that calculates the sum of an array",0,"int array_sum1(int array[], int size){\n\tint sum = 0;\n\tfor(int i = 0; i < size; i++){\n\t\tsum += array[i];\n\t}\n\treturn sum;\n}","int array_sum(int array[], int size){\n\n}","#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n#include \"soluceExo.c\"\n#include \"userExo.c\"\n\nint run_test(int array[], int size){\n\tint result1 = array_sum1(array, size);\n\tint result2 = array_sum(array, size);\n\tputs(\"\");\n\tif(result1 == result2){\n\t\tprintf(\"Test passed\");\n\t\treturn 0;\n\t}\n\telse{\n\t\tprintf(\"Test failed\");\n\t\treturn 1;\n\t}\n}\n\nint main(){\n\tint failed = 0;\n\tint array1[] = {1,2,3,4,5};\n\tfailed |= run_test(array1,5);\n\tint array2[] = {-1,-2,-3,-4,-5,-6};\n\tfailed |= run_test(array2,5);\n\tint array3[] = {0,0,0};\n\tfailed |= run_test(array3,3);\n\treturn failed;\n}");
+        addEx(1,"Exercise 3","You will be create a function that calculates the sum of an array",0,"int array_sum1(int array[], int size){\n\tint sum = 0;\n\tfor(int i = 0; i < size; i++){\n\t\tsum += array[i];\n\t}\n\treturn sum;\n}","int array_sum(int array[], int size){\n\n}","#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n#include \"soluceExo.c\"\n#include \"userExo.c\"\n\nint run_test(int array[], int size){\n\tint result1 = array_sum1(array, size);\n\tint result2 = array_sum(array, size);\n\tputs(\"\");\n\tif(result1 == result2){\n\t\tprintf(\"Test passed\");\n\t\treturn 0;\n\t}\n\telse{\n\t\tprintf(\"Test failed\");\n\t\treturn 1;\n\t}\n}\n\nint* generateRandomArray(int size, int minValue, int maxValue){\n\tint* array = malloc(size*sizeof(int));\n\tif(array == NULL){\n\t\texit(2);\n\t}\n\tfor(int i = 0; i < size; i++){\n\t\tarray[i] = rand()%(maxValue - minValue + 1) + minValue;\n\t}\n\treturn array; \n}\n\nint main(){\n\tsrand(time(NULL));\n\tint minSize = 5;\n\tint maxSize = 95;\n\tint minValue = -1000;\n\tint maxValue = 2001;\n\tint failed = 0;\n\tint size1 = rand()%(maxSize - minSize + 1) + minSize;\n\tint* array1 = generateRandomArray(size1, minValue, maxValue);\n\tfailed |= run_test(array1,size1);\n\tint size2 = rand()%(maxSize - minSize + 1) + minSize;\n\tint* array2 = generateRandomArray(size2, minValue, maxValue);\n\tfailed |= run_test(array2,size2);\n\tint size3 = rand()%(maxSize - minSize + 1) + minSize;\n\tint* array3 = generateRandomArray(size3, 0, 0);\n\tfailed |= run_test(array3,size3);\n\tint size4 = 0;\n\tint* array4 = generateRandomArray(size4, minValue, maxValue);\n\tfailed |= run_test(array4,size4);\n\treturn failed;\n}");
         addEx(1,"Exercise 4","You will be create a function that calculates the sum of an array",1,"def array_sum1(array, size):\n\tsum = 0\n\tfor i in range(size):\n\t\tsum += array[i]\n\treturn sum","def array_sum(array, size):\n\t","import random\nimport soluceExo\nimport userExo\n\ndef run_test(array, size):\n\tresult1 = soluceExo.array_sum1(array, size)\n\tresult2 = userExo.array_sum(array, size)\n\tif(result1 == result2):\n\t\tprint(\"Test passed\")\n\t\treturn 0\n\telse:\n\t\tprint(\"Test failed\")\n\t\treturn 1\n\ndef main():\n\tfailed = 0\n\tminSize = 5\n\tmaxSize = 100\n\tminValue = -1000\n\tmaxValue = 1000\n\tarraySize1 = random.randint(minSize, maxSize)\n\tarray1 = [random.randint(minValue, maxValue) for _ in range(arraySize1)]\n\tfailed |= run_test(array1,arraySize1)\n\tarraySize2 = random.randint(minSize, maxSize)\n\tarray2 = [random.randint(minValue, maxValue) for _ in range(arraySize2)]\n\tfailed |= run_test(array2,arraySize2)\n\tarraySize3 = random.randint(minSize, maxSize)\n\tarray3 = [0 for _ in range(arraySize3)]\n\tfailed |= run_test(array3,arraySize3)\n\tarray4 = []\n\tfailed |= run_test(array4,0)\n\treturn failed\n\nmain()");
         addEx(1,"Exercise 5","You will be create a function that calculates the sum of an array",3, "<?php\n\tfunction arraySum1($array, $size){\n\t\t$sum = 0;\n\t\tfor($i = 0; $i < $size; $i++){\n\t\t\t$sum += $array[$i];\n\t\t}\n\t\treturn $sum;\n\t}\n?>", "<?php\n\tfunction arraySum($array, $size){\n\n\t}\n?>", "<?php\n\tinclude 'soluceExo.php';\n\tinclude 'userExo.php';\n\n\tfunction generateRandomArray($minSize, $maxSize, $minValue, $maxValue){\n\t\t$size = rand($minSize, $maxSize);\n\t\tfor($i = 0; $i < $size; $i++){\n\t\t\t$array[$i] = rand($minValue, $maxValue);\n\t\t}\n\t\treturn $array;\n\t}\n\n\tfunction run_test($array, $size){\n\t\t$result1 = arraySum1($array, $size);\n\t\t$result2 = arraySum($array, $size);\n\t\tif($result1 == $result2){\n\t\t\techo \"Test passed\";\n\t\t\treturn 0;\n\t\t}\n\t\telse{\n\t\t\techo \"Test failed\";\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\tfunction main(){\n\t\t$failed = 0;\n\t\t$minSize = 5;\n\t\t$maxSize = 100;\n\t\t$minValue = -1000;\n\t\t$maxValue = 1000;\n\t\t$array1 = generateRandomArray($minSize, $maxSize, $minValue, $maxValue);\n\t\t$failed |= run_test($array1,count($array1));\n\t\t$array2 = generateRandomArray($minSize, $maxSize, $minValue, $maxValue);\n\t\t$failed |= run_test($array2,count($array2));\n\t\t$array3 = generateRandomArray($minSize, $maxSize, 0, 0);\n\t\t$failed |= run_test($array3,count($array3));\n\t\t$array4 = [];\n\t\t$failed |= run_test($array4,count($array4));\n\t\treturn $failed;\n\t}\n\n\tmain();\n?>");
         addEx(1,"Exercise 6","You will be create a function that calculates the average of an array", 5, "export function array_moy1(array, size){\n\tif(size === 0){\n\t\treturn null;\n\t}\n\tlet sum = 0;\n\tfor(let i = 0; i < size; i++){\n\t\tsum = sum + array[i];\n\t}\n\treturn sum/size;\n}","function array_moy(array, size){\n\n}","import { array_moy } from \"./userExo.mjs\";\nimport { array_moy1 } from \"./soluceExo.mjs\";\n\nfunction generateRandomArray(minSize, maxSize, minValue, maxValue){\n\tconst size = Math.floor(Math.random() * (maxSize - minSize + 1)) + minSize;\n\tconst array = [];\n\tfor(let i = 0; i < size; i++){\n\t\tconst value = Math.floor(Math.random() * (maxValue - minValue + 1)) + minValue;\n\t\tarray.push(value);\n\t}\n\treturn array;\n}\n\nfunction run_test(array, size){\n\tlet result1 = array_moy1(array, size);\n\tlet result2 = array_moy(array, size);\n\tif(result1 === result2){\n\t\tconsole.log(\"Test passed\");\n\t\treturn 0;\n\t}\n\telse{\n\t\tconsole.log(\"Test failed\");\n\t\treturn 1;\n\t}\n}\n\nfunction main(){\n\tlet failed = 0;\n\tconst minSize = 5;\n\tconst maxSize = 100;\n\tconst minValue = -1000;\n\tconst maxValue = 1000;\n\tconst array1 = generateRandomArray(minSize,maxSize,minValue,maxValue);\n\tfailed |= run_test(array1,array1.length);\n\tconst array2 = generateRandomArray(minSize,maxSize,minValue,maxValue);\n\tfailed |= run_test(array2,array2.length);\n\tconst array3 = generateRandomArray(minSize,maxSize,0,0);\n\tfailed |= run_test(array3,array3.length);\n\tconst array4 = [];\n\tfailed |= run_test(array4,array4.length);\n\treturn failed;\n}\n\nmain();");
Index: src/main/resources/Exercise/Exo3/mainExo.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n#include \"soluceExo.c\"\n#include \"userExo.c\"\n\nint run_test(int array[], int size){\n\tint result1 = array_sum1(array, size);\n\tint result2 = array_sum(array, size);\n\tputs(\"\");\n\tif(result1 == result2){\n\t\tprintf(\"Test passed\");\n\t\treturn 0;\n\t}\n\telse{\n\t\tprintf(\"Test failed\");\n\t\treturn 1;\n\t}\n}\n\nint main(){\n\tint failed = 0;\n\tint array1[] = {1,2,3,4,5};\n\tfailed |= run_test(array1,5);\n\tint array2[] = {-1,-2,-3,-4,-5,-6};\n\tfailed |= run_test(array2,5);\n\tint array3[] = {0,0,0};\n\tfailed |= run_test(array3,3);\n\treturn failed;\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/Exercise/Exo3/mainExo.c b/src/main/resources/Exercise/Exo3/mainExo.c
--- a/src/main/resources/Exercise/Exo3/mainExo.c	
+++ b/src/main/resources/Exercise/Exo3/mainExo.c	
@@ -18,13 +18,35 @@
 	}
 }
 
+int* generateRandomArray(int size, int minValue, int maxValue){
+	int* array = malloc(size*sizeof(int));
+	if(array == NULL){
+		exit(2);
+	}
+	for(int i = 0; i < size; i++){
+		array[i] = rand()%(maxValue - minValue + 1) + minValue;
+	}
+	return array; 
+}
+
 int main(){
+	srand(time(NULL));
+	int minSize = 5;
+	int maxSize = 95;
+	int minValue = -1000;
+	int maxValue = 2001;
 	int failed = 0;
-	int array1[] = {1,2,3,4,5};
-	failed |= run_test(array1,5);
-	int array2[] = {-1,-2,-3,-4,-5,-6};
-	failed |= run_test(array2,5);
-	int array3[] = {0,0,0};
-	failed |= run_test(array3,3);
+	int size1 = rand()%(maxSize - minSize + 1) + minSize;
+	int* array1 = generateRandomArray(size1, minValue, maxValue);
+	failed |= run_test(array1,size1);
+	int size2 = rand()%(maxSize - minSize + 1) + minSize;
+	int* array2 = generateRandomArray(size2, minValue, maxValue);
+	failed |= run_test(array2,size2);
+	int size3 = rand()%(maxSize - minSize + 1) + minSize;
+	int* array3 = generateRandomArray(size3, 0, 0);
+	failed |= run_test(array3,size3);
+	int size4 = 0;
+	int* array4 = generateRandomArray(size4, minValue, maxValue);
+	failed |= run_test(array4,size4);
 	return failed;
 }
\ No newline at end of file
Index: src/main/java/launcher/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package launcher;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Arrays;\n\n\nimport C.Languages.CLanguage;\nimport C.Languages.JavaLanguage;\nimport C.Languages.Language;\nimport C.Languages.LanguageFactory;\nimport M.Bdd;\nimport M.Exercise;\nimport M.ExerciseStdinStdout;\nimport M.ExerciseInclude;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        Bdd.idBdd(\"3306\", \"root\", \"MyS3cur3P@sswOrd!\");\n        Bdd.create();\n        Exercise[] exo = Exercise.allExo();\n\n        for (Exercise ex : exo) {\n\n            System.out.println(ex.toString() + \"\\n\");\n        }\n        try {\n            System.out.println(\"Java hello\");\n\n            // Call of the C part\n/*            String cFile = \"src/main/java/C/Test/codes-test/helloworld.c\";\n            Language cLanguage = LanguageFactory.assignLanguage(cFile);\n            cLanguage.execute(cFile);\n\n            // Call of the php part\n            String phpFile = \"src/main/java/C/Test/codes-test/helloworld.php\";\n            Language phpLanguage = LanguageFactory.assignLanguage(phpFile);\n            phpLanguage.execute(phpFile);\n\n            // Call of the python part\n            String pyFile = \"src/main/java/C/Test/codes-test/helloworld.py\";\n            Language pLanguage = LanguageFactory.assignLanguage(pyFile);\n            pLanguage.execute(pyFile);\n\n            // Call of the js part\n            String jsFile = \"src/main/java/C/Test/codes-test/helloworld.js\";\n            Language jsLanguage = LanguageFactory.assignLanguage(jsFile);\n            jsLanguage.execute(jsFile);\n\n            // Call of the java part (its javasception time)\n            String javaFile = \"src/main/java/C/Test/codes-test/helloworld.java\";\n            Language javaLanguage = LanguageFactory.assignLanguage(javaFile);\n            javaLanguage.execute(javaFile);\n*/\n            //Call of the c part for two files\n/*          String c2File = \"src/main/java/C/ExercisesInclude/mainEx1.c\";\n            String c3File = \"src/main/java/C/ExercisesInclude/ex1Soluce.c\";\n            CLanguage c2Language = new CLanguage();\n            String[] cFiles = {c2File, c3File};\n            c2Language.execute(cFiles);\n\n            // Call of the php part\n            String php2File = \"src/main/java/C/ExercisesInclude/mainEx1.php\";\n            Language php2Language = LanguageFactory.assignLanguage(php2File);\n            php2Language.execute(php2File);\n\n            //Call of the python part\n            String py2File = \"src/main/java/C/ExercisesInclude/mainEx1.py\";\n            Language p2Language = LanguageFactory.assignLanguage(py2File);\n            p2Language.execute(py2File);\n\n            String js2File = \"src/main/java/C/ExercisesInclude/mainEx1.mjs\";\n            Language js2Language = LanguageFactory.assignLanguage(js2File);\n            js2Language.execute(js2File);\n\n            // Call of the java part for two files (its javasception time)\n            String java2File = \"src/main/java/C/ExercisesInclude/launcher.MainEx1.java\";\n            String java3File = \"src/main/java/C/ExercisesInclude/launcher.Ex1Soluce.java\";\n            String javaMainFile = \"C.ExercisesInclude.launcher.MainEx1\";\n            JavaLanguage java2Language = new JavaLanguage();\n            String[] javaFiles = {java2File, java3File};\n            java2Language.execute(javaFiles, javaMainFile);\n*/\n            // Sort of menu displays\n            System.out.println(\"------------------------------\");\n            System.out.println(\"             Menu             \");\n            System.out.println(\"1-Sin/Sout exo | 2-Include exo\");\n            System.out.println(\"------------------------------\");\n\n            BufferedReader bufferRead = new BufferedReader(new InputStreamReader(System.in));\n            String s = bufferRead.readLine();\n            /*if (s.equals(\"1\")) {\n                // ---------------------------------------------\n                // ExerciseStdinStdout part\n                // ---------------------------------------------\n                // ask for the number of exercise\n                System.out.println(\"Select the exercise you want to do\");\n                String selectedExercise = bufferRead.readLine();\n\n                // if exo1 selected\n                if (selectedExercise.equals(\"1\")) {\n                    // initialing the exercise with name description entry and expected exit\n                    System.out.println(exo[1].ExoName);\n                    System.out.println(exo[1].ExoType);\n                    exo.entryData = new String[10];\n                    exo.outputData = new String[10];\n                    for (int i = 0; i < 10; i++) {\n                        exo.entryData[i] = String.valueOf(i);\n                        exo.outputData[i] = String.valueOf(i * 2);\n                    }\n                    System.out.println(\"The selected exercise is : \" + exo.name);\n                } else if (selectedExercise.equals(\"2\")) {\n                    // initialing the exercise with name description entry and expected exit\n                    exo.name = \"exo2\";\n                    exo.description = \"You will be given in entry a list of 10 integer and we ask you to give back their values multiplied by ten\";\n                    exo.entryData = new String[10];\n                    exo.outputData = new String[10];\n                    for (int i = 0; i < 10; i++) {\n                        exo.entryData[i] = String.valueOf(i);\n                        exo.outputData[i] = String.valueOf(i * 10);\n                    }\n                    System.out.println(\"The selected exercise is : \" + exo.name);\n                } else {\n                    // initialing the exercise with name description entry and expected exit\n                    exo.name = \"error exo\";\n                    exo.description = \"This exercise does not exist\";\n                    exo.entryData = new String[10];\n                    exo.outputData = new String[10];\n                    for (int i = 0; i < 10; i++) {\n                        exo.entryData[i] = String.valueOf(i);\n                        exo.outputData[i] = String.valueOf(i * 10);\n                    }\n                    System.out.println(\"The selected exercise is : \" + exo.name);\n                }\n\n                // ask the file for the first exercise\n                System.out.print(\"enter the file name\\n\");\n                String filePath = bufferRead.readLine();\n\n                // initialisating exercise file\n                String file = filePath;\n                Language solutionFile = LanguageFactory.assignLanguage(filePath);\n                // executing file, with this specific exercise (entry and expected output)\n                String[] givenResult;\n                givenResult = solutionFile.execute(file, exo.entryData);\n                System.out.println(Arrays.toString(givenResult));\n                System.out.println(Arrays.toString(solutionFile.execute(file, exo.entryData)));\n                if (exo.checkResult(givenResult)) {\n                    // case where utilisator's programm output matches the expected output\n                    System.out.println(\"You win, congrats\");\n                } else {\n                    // case where it doesnt\n                    System.out.println(\"You loose, try again by modifing your source code\");\n                }\n\n            }*/\n            if (s.equals(\"2\")) {\n\n                    //Part that reads a file and checks that its language has the same syntax as the language requested by the exercise.\n                    /*System.out.println(\"Enter the solution file name\");\n                    String filePathIncludeSolution = \"src/main/java/C/ExercisesInclude/\" + bufferRead.readLine();\n                    try (BufferedReader FileReader = new BufferedReader(new FileReader(filePathIncludeSolution))) {\n                        String line;\n                        StringBuilder content = new StringBuilder();\n                        while ((line = FileReader.readLine()) != null) {\n                            content.append(line).append((\"\\n\"));\n                        }\n                        Exercise.checkLanguage(content);\n                    } catch (IOException es) {\n                        System.err.println(\"Error during the reading file \" + es.getMessage());\n                    }*/\n                    //Part that asks the user to enter code and checks that its language has the same syntax as the language requested by the exercise\n                ExerciseInclude exampleJava = (ExerciseInclude) exo[6];\n                exampleJava.ExerciseResolution();\n                System.out.println(\"Well done ! You have successfully completed this exercise in Java language\");\n\n                ExerciseInclude exampleC = (ExerciseInclude) exo[2];\n                exampleC.ExerciseResolution();\n                System.out.println(\"Well done ! You have successfully completed this exercise in C language\");\n\n                ExerciseInclude examplePy = (ExerciseInclude) exo[3];\n                examplePy.ExerciseResolution();\n                System.out.println(\"Well done ! You have successfully completed this exercise in Py language\");\n\n                ExerciseInclude examplePHP = (ExerciseInclude) exo[4];\n                examplePHP.ExerciseResolution();\n                System.out.println(\"Well done ! You have successfully completed this exercise in PHP language\");\n\n                ExerciseInclude exampleJS = (ExerciseInclude) exo[5];\n                exampleJS.ExerciseResolution();\n                System.out.println(\"Well done ! You have successfully completed this exercise in JS language\");\n\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/launcher/Main.java b/src/main/java/launcher/Main.java
--- a/src/main/java/launcher/Main.java	
+++ b/src/main/java/launcher/Main.java	
@@ -172,14 +172,14 @@
                         System.err.println("Error during the reading file " + es.getMessage());
                     }*/
                     //Part that asks the user to enter code and checks that its language has the same syntax as the language requested by the exercise
-                ExerciseInclude exampleJava = (ExerciseInclude) exo[6];
-                exampleJava.ExerciseResolution();
-                System.out.println("Well done ! You have successfully completed this exercise in Java language");
-
                 ExerciseInclude exampleC = (ExerciseInclude) exo[2];
                 exampleC.ExerciseResolution();
                 System.out.println("Well done ! You have successfully completed this exercise in C language");
 
+                ExerciseInclude exampleJava = (ExerciseInclude) exo[6];
+                exampleJava.ExerciseResolution();
+                System.out.println("Well done ! You have successfully completed this exercise in Java language");
+
                 ExerciseInclude examplePy = (ExerciseInclude) exo[3];
                 examplePy.ExerciseResolution();
                 System.out.println("Well done ! You have successfully completed this exercise in Py language");
